--merge alvaro y carla + papro
model Practica1

class Empleado
attributes
nombre : String
dni : String
edad : Integer
end

class Director < Empleado
end

class Gerente < Empleado
end

class TrabajadorBase < Empleado
end

class Empresa
attributes
nombre : String
nEmpleados : Integer
productos : Integer
valMinPedidos : Real
end

class Producto
attributes
nombre : String
ID : Integer
end

class Cliente
attributes
usuario : String
contrasena : String
eurosGastados : Real derive: self.pedidoCliente.precioTotal->sum() 

--transferir producto comprado a un cliente
operations
    transferirProducto(producto : Producto, cantidad : Integer)
    pre: producto<>null and cantidad>0
    post:
        self.pertenece_a->includes(producto)
        and producto.productoPedido->exists(p |
        p.dentroDelPedido.posee->exists(cliente | cliente=self) and p.unidades = cantidad)
        and producto.vendedor.vendeProducto->exists(e | e.producto = producto and e.stock = e.stock@pre - cantidad) --Carga el stock de la pre condicion y le resta la cantidad asignada
end

class Vip < Cliente
end

class Pedido
attributes
fecha : String
precioTotal : Real derive : --Crea la variable precioBase para actualizarla en funcion de si es vip o superior a 1000, creo que es un poco más intuitivo
let precioBase = self.dentroDelPedido->iterate(producto ; acumulador : Real = 0 | 
    acumulador + (producto.productoPedido.unidades->sum() * producto.vendeProducto.precio->sum()))
    in
    if (self.comprador->exists(cliente | cliente.oclIsTypeOf(Vip)) or precioBase >= 1000) then
        precioBase - (precioBase* 0.1) 
    else 
        precioBase
    endif
end

associationclass trabajaEn between
Empleado [1..*] role empleado
Empresa [0..3] role trabajo
attributes
salario : Integer
end

association Direccion between
Director[1] role dirigida_por
Empresa[1..3] role dirige
end

association Gerencia between
Gerente [1] role supervisada_por
Empresa [1..3] role supervisa
end

associationclass vendeProducto between
Empresa[1..*] role vendedor
Producto[1..*] role producto
attributes
precio : Integer
stock : Integer
end

associationclass productoPedido between
Pedido[1..*] role pedido_al_que_pertenece
Producto[1..*] role dentroDelPedido
attributes
unidades : Integer
end

association EmpleadoEsVipDeEmpresa between
Empleado[1] role esVip
Vip[0..3] role empleadoVip --un empleado puede ser vip de 3 empresas
end

association clientesDeUnaEmpresa between
Empresa[1..*] role tieneClientes
Cliente[0..*] role usuarioDeEmpresa
end

association clienteHacePedido between
Cliente[1..*] role comprador
Pedido[1..*] role pedidoCliente
end

association poseeProducto between
Cliente[0..*] role posee
Producto[0..*] role pertenece_a
end

constraints

--En otro programa que no fuera USE, esto seria un subtipado de relacion trabajaEn
--Si un director dirige una empresa, en alguna de las empresas en las que trabaja tiene que figurar el como director
context Director inv Director_Subtipado:
    self.trabajaEn->notEmpty() and 
    self.trabajaEn->forAll(empresas_de_un_trabajador | 
        self.dirige->exists(empresas_que_dirige | empresas_que_dirige = empresas_de_un_trabajador)
    )

--En otro programa que no fuera USE, esto seria un subtipado de relacion
--Si un gerente regenta una empresa, en alguna de las empresas en las que trabaja tiene que figurar el como gerente
context Gerente inv Gerente_Subtipado:
    self.trabajaEn->notEmpty() and 
    self.trabajaEn->forAll(empresas_de_un_trabajador | 
        self.supervisa->exists(empresas_que_supervisa | empresas_que_supervisa = empresas_de_un_trabajador)
    )

--Un director tiene que dirigir, si no seria trabajador base
context Director inv Director_dirige:
    self.dirige -> notEmpty()

--Un gerente tiene que supervisar, si no seria trabajador base
context Gerente inv Gerente_supervisa:
    self.supervisa -> notEmpty()

-- Un director cobra más que un gerente dentro de una misma empresa 2 como el profe dice
context Director inv directorCobraMasQueGerente:
self.trabajaEn.salario->asSequence()->max() > self.dirige.supervisada_por.trabajaEn.salario->asSequence()->max()

--Un gerente cobra más que los trabajadores base dentro de una misma empresa
context Gerente inv gerenteCobraMasQueTrabajadoresBase:
self.trabajaEn.salario->asSequence()->max() >
self.supervisa.empleado->select(oclIsTypeOf(TrabajadorBase)).trabajaEn.salario->asSequence()->max()

--Un director cobra más que los trabajadores base dentro de una misma empresa
context Director inv directorCobraMasQueTrabajadoresBase:
self.trabajaEn.salario->asSequence()->max() > 
self.dirige.empleado->select(oclIsTypeOf(TrabajadorBase)).trabajaEn.salario->asSequence()->max()

--cliente es vip si ha realizado un pedido de más de 1000 euros
context Vip inv clienteVip1000:
self.oclIsTypeOf(Vip) and self.eurosGastados > 1000

--nadie puede hacer un pedido de artículos que no estén en el almacén y lo hace dueño de ese producto
context Cliente inv clienteNoPuedePedirArticulosQueNoEstenEnAlmacenOQuePidaMasProductosQueLosExistentesYDespuesSeHaceDueno:  
self.pedidoCliente->forAll(pedido | pedido.dentroDelPedido->forAll(producto |
            pedido.dentroDelPedido->forAll(producto |
            producto.vendedor.vendeProducto->exists(p | p.stock <> null implies p.stock >=0 and
            producto.productoPedido -> exists(e | e.unidades <= p.stock))) and 
            self.pertenece_a->includes(producto)))

--una misma persona no puede tener artículos de más de 10 tipos de productos distintos, independientemente de
--la empresa en donde los compró
context Cliente inv clienteNoPuedeTenerMasDe10Articulos:
self.pedidoCliente->forAll(pedido |
        let sumaUnidades = pedido.dentroDelPedido->collect(producto | producto.productoPedido.unidades)->sum() 
        in
        sumaUnidades <= 10)

-- Un empleado debe ser mayor de edad
context Empleado inv empleadoEdadMayorDeEdad:
self.edad >= 18

--Un pedido debe tener un valor minimo
context Pedido inv pedidoValorMinimo:
self.precioTotal >= self.dentroDelPedido.vendedor->select(empresa | empresa.producto.pedido_al_que_pertenece->includes(self)).valMinPedidos->asSequence()->first()
--podemos poner first() en el valMinPedidos porque aunque se lea como una secuencia, un pedido
--va a pertenecer exclusivamente a un solo vendedor. no puede haber un mismo pedido de dos vendedores distintos

--Producto pedido debe estar en stock
context Pedido inv productoEnStock:
(self.dentroDelPedido->iterate(producto; acumulador : Integer = 0 | if 
producto.vendeProducto->exists(empresa | empresa.producto.pedido_al_que_pertenece->includes(self)) and
producto.vendeProducto->select(empresa | empresa.producto.pedido_al_que_pertenece->includes(self)).stock->asSequence()->first >=1
then acumulador +1 else acumulador endif)) = self.dentroDelPedido->size()

--no puedes pedir 0 unidades de un producto
